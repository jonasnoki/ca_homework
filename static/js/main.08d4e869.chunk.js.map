{"version":3,"sources":["Particle.ts","Simulation.ts","Scene.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Particle","x","y","z","geometry","SphereGeometry","material","MeshNormalMaterial","currentPosition","Vector3","previousPosition","velocity","force","bouncing","lifetime","fixed","mesh","this","set","Mesh","add","dt","addScaledVector","position","p","sign","dot","normal","constant","normalizedNormal","normalize","sub","multiplyScalar","Simulation","particles","plane","collisionCount","push","setLifetime","console","log","getLifetime","setBouncing","addForce","Plane","setFromNormalAndCoplanarPoint","getCurrentPosition","t","forEach","updateParticle","collisionParticlePlane","correctCollisionParticlePlain","Scene","canvasRef","React","useRef","useState","context","useEffect","camera","THREE","window","innerWidth","innerHeight","scene","light","simulation","particle","renderer","antialias","canvas","current","setSize","setAnimationLoop","time","update","render","animation","init","id","ref","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08d4e869.chunk.js","sourcesContent":["import {Vector3, Plane, Mesh, SphereGeometry, MeshNormalMaterial} from \"three\";\n\nexport class Particle {\n    private currentPosition: Vector3 = new Vector3();\n    private previousPosition: Vector3 = new Vector3();\n    private velocity: Vector3 = new Vector3();\n    private force: Vector3 = new Vector3();\n\n    private bouncing: number = 0;\n    private lifetime: number = 0;\n    private fixed: boolean = false;\n\n    public mesh: Mesh;\n\n    constructor(x: number, y: number, z: number, geometry = new SphereGeometry(1),material = new MeshNormalMaterial(), ) {\n        this.currentPosition.set(x, y, z);\n        this.mesh = new Mesh(geometry, material);\n    }\n\n    // setters\n    public setPosition(x: number, y: number, z: number): void {\n        this.currentPosition.set(x, y, z);\n    };\n\n    public setPreviousPosition(x: number, y: number, z: number): void {\n        this.previousPosition.set(x, y, z)\n    };\n\n    public setVelocity(x: number, y: number, z: number): void {\n        this.velocity.set(x, y, z)\n    };\n\n    public setForce(x: number, y: number, z: number): void {\n        this.velocity.set(x, y, z)\n    };\n\n    public setBouncing(bouncing: number): void {\n        this.bouncing = bouncing;\n    };\n\n    public setLifetime(lifetime: number): void {\n        this.lifetime = lifetime;\n    };\n\n    public setFixed(fixed: boolean): void {\n        this.fixed = fixed;\n    };\n\n\n    //getters\n    public getCurrentPosition(): Vector3 {\n        return this.currentPosition\n    };\n\n\n    public getPreviousPosition(): Vector3 {\n        return this.previousPosition\n    };\n\n    public getVelocity(): Vector3 {\n        return this.velocity\n    };\n\n\n    public getBouncing(): number {\n        return this.bouncing\n    };\n\n    public getLifetime(): number {\n        return this.lifetime\n    };\n\n    public isFixed(): boolean {\n        return this.fixed;\n    };\n\n\n    public addForce(force: Vector3) {\n        this.force.add(force);\n    }\n\n    public updateParticle(dt: number) {\n        if (!this.fixed) {\n            // EulerSemi\n            this.previousPosition.set(this.currentPosition.x,this.currentPosition.y,this.currentPosition.z);\n            this.velocity = this.velocity.addScaledVector(this.force,dt);\n            this.currentPosition = this.currentPosition.addScaledVector(this.velocity, dt);\n            //TODO: implement Verlet\n\n\n            this.mesh.position.set(this.currentPosition.x, this.currentPosition.y, this.currentPosition.z);\n        }\n\n        return;\n    }\n\n    public collisionParticlePlane(p: Plane) {\n        let sign: number;\n        // TODO: check the following calculation:\n\n        sign = this.currentPosition.dot(p.normal) + p.constant;\n        // sign = glm::dot(m_currentPosition, p.normal) + p.d;\n        sign *= this.previousPosition.dot(p.normal) + p.constant;\n        // sign *= glm::dot(m_previousPosition, p.normal) + p.d;\n\n        return sign <= 0\n\n    }\n\n    public correctCollisionParticlePlain(p: Plane) {\n        // TODO: check the following calculation especially what p.d refers to???:\n        const normalizedNormal: Vector3 = p.normal.normalize()\n        // the original implementation is like this: \tfloat d = -glm::dot(point, normal);\n        // implementation of threejs confirms that it is the same: \t\tthis.constant = - point.dot( this.normal );\n        // m_currentPosition = m_currentPosition - (1 + m_bouncing) * (glm::dot(m_currentPosition, p.normal) + p.d) * p.normal;\n        this.currentPosition = this.currentPosition.sub(normalizedNormal.multiplyScalar(((1 + this.bouncing) * (this.currentPosition.dot(normalizedNormal) + p.constant)))) ;\n        // m_velocity = m_velocity - (1 + m_bouncing) * (glm::dot(m_velocity, p.normal) + p.d) * p.normal;\n        this.velocity = this.velocity.sub(normalizedNormal.multiplyScalar(((1 + this.bouncing) * (this.velocity.dot(normalizedNormal) + p.constant)))) ;\n    }\n\n}","import {Vector3, Plane} from \"three\";\nimport {Particle} from \"./Particle\";\n\nconst DT = 0.01;\n\nexport class Simulation {\n    public particles: Particle[] = []\n    public plane: Plane;\n    public collisionCount = 0;\n\n\n    constructor() {\n        // One particle\n        const p = new Particle(0.0, 10.0, 0.0);\n        this.particles.push(p);\n        p.setLifetime(7.0);\n        //\tp.setFixed(true);\n        console.log(\"Lifetime =\" + p.getLifetime());\n        p.setBouncing(1.0);\n        p.addForce(new Vector3( 0, -9.8, 0));\n        // One Plane\n        this.plane = new Plane();\n        this.plane.setFromNormalAndCoplanarPoint(new Vector3(0, 1, 0), new Vector3(0, 0, 0));\n\n\n        const currentPosition = p.getCurrentPosition();\n        console.log(`position = ${currentPosition.x}  ${currentPosition.y}  ${currentPosition.z}  time =  0`)\n    }\n\n    update(t: number){\n        console.log(t)\n        this.particles.forEach(p => {\n            const currentPosition = p.getCurrentPosition();\n            // call solver types: EulerOrig, EulerSemi and Verlet(to be implemented)\n            p.updateParticle(DT);\n            console.log(`position = ${currentPosition.x}  ${currentPosition.y}  ${currentPosition.z}  time =  ${t}`)\n            //Check Floor collisions\n            if (p.collisionParticlePlane(this.plane)){\n                p.correctCollisionParticlePlain(this.plane);\n                console.log(\"rebound = \" + this.collisionCount++);\n            }\n        })\n    }\n}","import React from 'react';\nimport * as THREE from \"three\";\nimport {Simulation} from \"./Simulation\";\n\nfunction Scene() {\n    const canvasRef = React.useRef<HTMLCanvasElement>(null);\n    const [context, setContext] = React.useState<CanvasRenderingContext2D | null>(null);\n\n    React.useEffect(() => {\n        init();\n    }, [context]);\n\n\n    function init() {\n        const camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 100);\n\n        camera.position.set(0, 5, 40);\n\n        const scene = new THREE.Scene();\n\n        const light = new THREE.AmbientLight(0x404040); // soft white light\n        scene.add(light);\n\n        const simulation = new Simulation();\n\n        simulation.particles.forEach(particle => scene.add(particle.mesh))\n\n        const renderer = new THREE.WebGLRenderer({antialias: true, canvas: canvasRef.current as HTMLCanvasElement});\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setAnimationLoop((time) => animation(time, camera, scene, renderer, simulation));\n    }\n\n    function animation(time: number, camera: THREE.Camera, scene: THREE.Scene, renderer: THREE.WebGLRenderer, simulation: Simulation) {\n        simulation.update(time);\n        renderer.render(scene, camera);\n\n    }\n\n    return (\n        <canvas\n            id=\"canvas\"\n            ref={canvasRef}\n        ></canvas>\n    );\n}\n\nexport default Scene;\n","import React from 'react';\nimport './App.css';\nimport Scene from \"./Scene\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Scene/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}